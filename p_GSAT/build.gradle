/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'bluemlj' at '11/14/16 11:20 PM' with Gradle 3.0
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.0/userguide/tutorial_java_projects.html
 */


buildscript {
    dependencies {
        classpath group: 'de.dynamicfiles.projects.gradle.plugins', name: 'javafx-gradle-plugin', version: '8.7.0'
    }
    repositories {
        mavenLocal()
        mavenCentral()

    }
}


// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the gradle plugin for JaCoCo
apply plugin: 'jacoco'

//JavaFX
apply plugin: 'javafx-gradle-plugin'

jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/reports")
}

ext { buildTime = new Date().format("yyyyMMddHHmm") }

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'
    
    compile fileTree('libs/jillion-5.1.jar')
    compile fileTree('libs/jfxrt.jar')
    
    // https://mvnrepository.com/artifact/org.biojava/biojava
	// compile group: 'org.biojava', name: 'biojava', version: '1.5'
    compile fileTree('libs/biojava-1.5.jar')   
        
    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.5'



    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
// In this section we declare the jacocoTestReport structure

test {
     exclude '**/userDrivenTests/', '**/src/main/java/org/'
}


jfx {
    verbose = true
    mainClass = "core.Main"
    jfxAppOutputDir = "build/jfx/GSAT"
    jfxMainAppJarName = "GSATv1.0.jar"
    deployDir = "src/main/deploy"
    useEnvironmentRelativeExecutables = true

    // gradle jfxJar
    css2bin = false
    preLoader = null // String
    updateExistingJar = false
    allPermissions = false
    manifestAttributes = null // Map<String, String>
    addPackagerJar = true
    copyAdditionalAppResourcesToJar = false

    // gradle jfxNative
    identifier = null  // String - setting this for windows-bundlers makes it possible to generate upgradeable installers (using same GUID)
    vendor = "SEPstrudios"
    nativeOutputDir = "build/jfx/native"
    bundler = "ALL" // set this to some specific, if your don't want all bundlers running, examples "windows.app", "jnlp", ...
    launcherArguments = null // List<String>
    nativeReleaseVersion = "0.0"
    needShortcut = false
    needMenu = false
    bundleArguments = [
        // dont bundle JRE (not recommended, but increases build-size/-speed)
        runtime: null
    ]
    appName = "GSAT" // this is used for files below "src/main/deploy", e.g. "src/main/deploy/windows/project.ico"
    additionalBundlerResources = null // path to some additional resources for the bundlers when creating application-bundle
    additionalAppResources = null // path to some additional resources when creating application-bundle
    noBlobSigning = false // when using bundler "jnlp", you can choose to NOT use blob signing
    customBundlers = null // List<String>
    
    // gradle jfxRun
    runJavaParameter = null // String
    runAppParameter = null // String

    // per default the outcome of the gradle "jarTask" will be used, set this to specify otherwise (like proguard-output)
    alternativePathToJarFile = null // String

    // to disable patching of ant-javafx.jar, set this to false
    usePatchedJFXAntLib = true

    // making it able to support absolute paths, defaults to "false" for maintaining old behaviour
    checkForAbsolutePaths = false
}
