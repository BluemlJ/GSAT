package sequenceAnalyser;

import java.util.LinkedList;

/**
 * This class contains the logic of analyzing DNA sequences.
 *
 */
public class DNAUtils {

    
    /**
     * Compares a sequence to a reference sequence (typically, a gene) to find mutations. Returns the list of mutations, denoted as described by
     * the department of organic chemistry.
     */
    public static LinkedList<String> findMutations(AnalyzedSequence toAnalyze, Gene reference) {
	return null;
    }
    
    
    
    
    /**
     * Find the gene that fits best to a given sequence.
     */
    public static LinkedList<String> findRightGene(AnalyzedSequence toAnalyze) {
	return null;
    }
    
    
    
    /**
     * Compares to sequences and returns their differences.
     * Note for Kevin: You could probably use the Levenshtein-Algorithm, but maybe (also?)
     * the Needleman-Wunsch-Algorithm or the Smith-Waterman-Algorithm.
     */
    private static LinkedList<String> compareAndReport(Sequence sOne, Sequence sTwo) {
	return null;
	
    }
    
    
    
    
    /**
     * Compares to sequences and returns their similarity.
     */
    private static double compare(Sequence sOne, Sequence sTwo) {
	return 0.0;
    }
    
}
