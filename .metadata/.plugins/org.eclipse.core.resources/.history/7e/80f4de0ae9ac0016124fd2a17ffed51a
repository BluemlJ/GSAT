package analysis;

import java.util.LinkedList;

/**
 * This class contains the logic of analyzing DNA sequences. Thus, it is the 
 * main part of the analyzing pipeline.
 * 
 *
 */
public class DNAUtils {

    /**
     * This method finds the point in given sequence from which on the sequence is 
     * not reliable anymore. 
     * 
     * @param sequence The sequence for which the end of reliability should be determined.
     * 
     * @return the index of the sequence String from which on it is considered unreliable
     */
    public int findEndOfTrustworthyness(AnalyzedSequence sequence) {
	return 0;
    }
    
    
    
    
    /**
     * Compares a sequence to a reference sequence (typically, a gene) to find mutations. Returns the list of mutations, denoted as described by
     * the department of organic chemistry.
     * 
     * @param toAnalyze The sequence to be analyzed (which may have mutations)
     * @param reference The referenced gene (used to compare the sequence against it)
     * 
     * @return A List of Mutations, represented as Strings in the given format
     */
    public static LinkedList<String> findMutations(AnalyzedSequence toAnalyze, Gene reference) {
	return null;
    }
    
    
    /**
     * Compares a sequence to the reference
     * @param toAnalyse
     * @return
     */
    public static LinkedList<String> findMutations(AnalyzedSequence toAnalyze) {
	
	LinkedList<String> mutations = findMutations(toAnalyze, toAnalyze.getReferencedGene());
	return mutations;
    }
    
    
    
    /**
     * Finds the gene that fits best to a given sequence by comparing it to all given genes.
     * Known genes can be found in the database.
     */
    public static Gene findRightGene(AnalyzedSequence toAnalyze) {
	return null;
    }
    
    
    
    /**
     * Compares to sequences and returns their differences.
     * Note for Kevin: You could probably use the Levenshtein-Algorithm, but maybe (also?)
     * the Needleman-Wunsch-Algorithm or the Smith-Waterman-Algorithm. This method should
     * have some kind of backtracking (to report on changes), while "compare" shouldn't.
     */
    private static LinkedList<String> compareAndReport(Sequence sOne, Sequence sTwo) {
	return null;
	
    }
    
    
    
    
    /**
     * Compares to sequences and returns their similarity.
     */
    private static double compare(Sequence first, Sequence second) {
	return 0.0;
    }
    
}
