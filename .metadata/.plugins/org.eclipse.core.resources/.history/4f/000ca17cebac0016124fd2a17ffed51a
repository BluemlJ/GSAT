package analysis;

/**
 * Models a DNA sequence which could be a reference gene or a given sequence to analyze.
 * Encapsulates the shared behavior of genes and sequences in analysis.
 * 
 * @author Ben Kohr
 *
 */
public abstract class Sequence {

    /**
     * The sequence of nucleotides.
     */
    protected String sequence;
    
    
    /**
     * Constructor setting the attribute (used for inheriting classes).
     * 
     * @param sequence the sequence of nucleotides
     */
    public Sequence(String sequence) {
	this.sequence = sequence;
    }
    
    
    /**
     * Returns the reversed version of this sequence, i.e. 
     * the nucleotide sequence is inverted
     * 
     * @return A new "reversed" sequence object (including the inverted nucleotide sequence)
     * 
     * @author Ben Kohr
     */
    public AnalyzedSequence getReversedSequence() {
	
	StringBuilder builder = new StringBuilder(sequence);
	builder.reverse();
	String reversedSequence = builder.toString();
	
	return new AnalyzedSequence(reversedSequence);
    }
    
    
    
    /**
     * Returns the complementary version of this sequence.
     */
    public Sequence getComplementarySequence() {
	return null;
    }
    
    
    
}
